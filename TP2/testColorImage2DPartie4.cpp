#include <iostream>
#include <fstream>
#include <fstream>
#include "Image2D.hpp"
#include "Color.hpp"

using namespace std;

int main( int argc, char** argv )
{
    typedef Image2D<Color> ColorImage2D;
    typedef ColorImage2D::Iterator Iterator;
    typedef ColorImage2D::ConstIterator ConstIterator;

    ColorImage2D img( 256, 256, Color( 0, 0, 0 ) );
    Iterator it = img.begin();

    for ( int y = 0; y < 256; ++y )
    {
        for ( int x = 0; x < 256; ++x )    
            *it++ = Color( y, x, (2*x+2*y) % 256 );
    }

    std::ofstream output( "OutputColorsIter.ppm" );

    output << "P6" << std::endl; // PPM raw
    output << "# Generated by You !" << std::endl;
    output << img.w() << " " << img.h() << std::endl;
    output << "255" << std::endl;

    for ( Iterator it = img.begin(), itE = img.end(); it != itE; ++it ) // (*)
    {
        Color c = *it;
        output << c.red << c.green << c.blue;
    }

    output.close();

    std::ofstream output2( "OutputColorsConstIter.ppm" );

    output2 << "P6" << std::endl; // PPM raw
    output2 << "# Generated by You !" << std::endl;
    output2 << img.w() << " " << img.h() << std::endl;
    output2 << "255" << std::endl;
        
    const ColorImage2D& cimg = img; // Vue "constante" sur l'image img.
    for ( ConstIterator it = cimg.begin(), itE = cimg.end(); it != itE; ++it ) // (*)
    { 
        Color c = *it;
        output2 << c.red << c.green << c.blue;
    }

    output2.close();

    return 0;
}